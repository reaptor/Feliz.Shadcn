#r "nuget: SimpleExec"

open System
open System.IO
open System.Text.RegularExpressions
open SimpleExec


// let appDir = Path.Combine(__SOURCE_DIRECTORY__, "my-app")

// if not <| Directory.Exists(appDir) then
//     Command.Run("npx", "shadcn@canary init", __SOURCE_DIRECTORY__)
//     Command.Run("npx", "shadcn@canary add --yes --overwrite --all", appDir)

let componentsDir = Path.Combine(__SOURCE_DIRECTORY__, "components")

let camelCase (s: string) = Char.ToLowerInvariant(s[0]).ToString() + s[1..]

let elements = File.CreateText(Path.Combine(__SOURCE_DIRECTORY__, "Shadcn.fs"))
elements.WriteLine("""// This file is auto-generated by the Generate.fsx script

namespace Feliz.Shadcn

[<AutoOpen>]
module Elements =
    open Fable.Core
    open Fable.Core.JsInterop
    open Feliz
    open Feliz.Shadcn.Helpers

    [<Erase>]
    type Shadcn =""")

let props = File.CreateText(Path.Combine(__SOURCE_DIRECTORY__, "Props.fs"))
props.WriteLine("""// This file is auto-generated by the Generate.fsx script

namespace Feliz.Shadcn

[<AutoOpen>]
module Props =
    open Fable.Core
    open Fable.Core.JsInterop
    open Feliz
    open Feliz.Shadcn.Helpers
""")

for path in Directory.GetFiles(componentsDir, "*.tsx") do
    let contents = File.ReadAllText(path)

    if contents.Contains("variants: {") then
          printfn $"%s{path} contains variants."      
    
    let exports =
        Regex.Matches(contents, @"export\s*{([^}]+)}")
        |> Seq.filter (fun m -> m.Success && m.Groups.Count > 0)
        |> Seq.collect (fun m -> m.Groups[1].Value.Split(",") |> Array.map _.Trim())
        |> List.ofSeq

    let filename = Path.GetFileNameWithoutExtension(path)
    
    let elementName =
        exports |> List.skipWhile (fun x -> Char.IsLower x[0]) |> List.head

    elements.WriteLine($"""        static member %s{camelCase elementName} (props: IReactProperty seq) = createElement(import "%s{elementName}" "@/components/ui/%s{filename}") props""") |> ignore
    elements.WriteLine($"""        static member %s{camelCase elementName} (children: #seq<ReactElement>) = createElement(import "%s{elementName}" "@/components/ui/%s{filename}") [ prop.children (children :> ReactElement seq) ]""") |> ignore
    elements.Flush()
    
    let propList =
        exports
        |> List.takeWhile (fun x -> x.StartsWith elementName)
        |> List.filter (fun x -> x <> elementName)
        |> List.map (fun x ->
            let propName = x[elementName.Length..]
            camelCase propName, x
        )

    if propList.Length > 0 then
        props.WriteLine("    [<Erase>]") |> ignore
        props.WriteLine($"    type %s{camelCase elementName} =") |> ignore
        for name, importName in propList do
            props.WriteLine($"""        static member %s{name} (props: IReactProperty seq) = createElement(import "%s{importName}" "@/components/ui/%s{filename}") props""") |> ignore
            props.WriteLine($"""        static member %s{name} (children: #seq<ReactElement>) = createElement(import "%s{importName}" "@/components/ui/%s{filename}") [ prop.children (children :> ReactElement seq) ]""") |> ignore
            props.WriteLine($"""        static member %s{name} (text: string) = createElement(import "%s{importName}" "@/components/ui/%s{filename}") [ prop.text text ]""") |> ignore
        props.WriteLine("") |> ignore

props.Close()      
elements.Close()