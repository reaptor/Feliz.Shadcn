#r "nuget: FSharp.Data"
#load "Common.fsx"

open System
open System.IO
open System.Text.RegularExpressions
open Common

// let appDir = Path.Combine(__SOURCE_DIRECTORY__, "my-app")

// if not <| Directory.Exists(appDir) then
//     Command.Run("npx", "shadcn@canary init", __SOURCE_DIRECTORY__)
//     Command.Run("npx", "shadcn@canary add --yes --overwrite --all", appDir)

let elements = File.CreateText(Path.Combine(__SOURCE_DIRECTORY__, "Shadcn.fs"))

elements.WriteLine(
    """// This file is auto-generated by the Generate.fsx script

namespace Feliz.Shadcn

open Fable.Core
open Fable.Core.JsInterop
open Feliz

[<Erase>]
type Shadcn ="""
)

for path in componentPaths do
    let filename = Path.GetFileNameWithoutExtension(path)

    let contents = File.ReadAllText(path)

    if contents.Contains("variants: {") then
        printfn $"%s{filename} contains variants. Add them manually to Props.fs"

    let exports =
        Regex.Matches(contents, @"export\s*{([^}]+)}")
        |> Seq.filter (fun m -> m.Success && m.Groups.Count > 0)
        |> Seq.collect (fun m -> m.Groups[1].Value.Split(",") |> Array.map _.Trim())
        |> Seq.choose (fun x -> if x.Contains " " || x = "" then None else Some x)
        |> List.ofSeq

    printfn "%A" exports
    printfn ""

    if exports.Length > 0 then
        for name in exports do
            if name.StartsWith("use") || name.EndsWith "Variants" then
                ()
            else
                elements.WriteLine(
                    $"""    static member inline %s{camelCase name} (props: list<IReactProperty>) = Interop.reactApi.createElement(import "%s{name}" "@/components/ui/%s{filename}", createObj !!props)"""
                )

                elements.WriteLine(
                    $"""    static member inline %s{camelCase name} (children: #seq<ReactElement>) = Interop.reactApi.createElement(import "%s{name}" "@/components/ui/%s{filename}", createObj [ "children" ==> Interop.reactApi.Children.toArray (Array.ofSeq children) ])"""
                )

                elements.WriteLine(
                    $"""    static member inline %s{camelCase name} (text: string) = Interop.reactApi.createElement(import "%s{name}" "@/components/ui/%s{filename}", createObj !![ prop.text text ])"""
                )

    elements.WriteLine("") |> ignore
    elements.Flush()

elements.Close()
